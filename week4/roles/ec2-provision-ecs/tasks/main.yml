---
  - name: create ELB security_group
    ec2_group:
      description: SG for {{cluster_name}} ELB
      name: "{{cluster_name}}_ELBSG"
      state: "{{state}}"
      region: "{{region}}"
      vpc_id: "{{vpc_id}}"
      rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
    register: elb_sg_out

  - name: create instance security_group
    ec2_group:
      description: SG for {{cluster_name}} instance
      name: "{{cluster_name}}_instanceSG"
      state: "{{state}}"
      region: "{{region}}"
      vpc_id: "{{vpc_id}}"
      rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          group_id: "{{elb_sg_out.group_id}}"
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: "0.0.0.0/0"
        - proto: tcp
          from_port: 443
          to_port: 443
          group_id: "{{elb_sg_out.group_id}}"
    register: instance_sg_out

  - name: create ecs cluster
    ecs_cluster:
      name: "{{cluster_name}}"
      state: "{{state}}"

  - name: create ELB
    ec2_elb_lb:
      name: "{{cluster_name}}ELB"
      state: "{{state}}"
      security_group_ids: "{{elb_sg_out.group_id}}"
      subnets:
        - "{{dmza_subnet_id}}"
        - "{{dmzb_subnet_id}}"
        - "{{dmzc_subnet_id}}"
      listeners:
        - protocol: http
          load_balancer_port: 80
          instance_port: 80
    register: elb_out

  - name: create ECS Service Scheduler IAM Role
    iam:
      iam_type: role
      name: "{{cluster_name}}-service-role"
      state: present

  - name: create ECS Container Instance IAM Role
    iam:
      iam_type: role
      name: "{{cluster_name}}-instance-role"
      state: present

  - name: set ECS Service Policy
    iam_policy:
      iam_type: role
      iam_name: "{{cluster_name}}-service-role"
      policy_name: "AmazonEC2ContainerServiceRolePolicy"
      policy_document: "{{playbook_dir}}/roles/aws-provision-iam/files/ContainerServicePolicy.json"
      state: present

  - name: set ECS Instance Policy
    iam_policy:
      iam_type: role
      iam_name: "{{cluster_name}}-instance-role"
      policy_name: "AmazonEC2ContainerServiceforEC2Policy"
      policy_document: "{{playbook_dir}}/roles/aws-provision-iam/files/ContainerServiceforEC2Policy.json"
      state: present

  - name: find ami
    ec2_ami_find:
      name: "amzn-ami-2015.09.f-amazon-ecs-optimized*"
      owner: "679593333241"
      region: "{{region}}"
      sort: name
      sort_order: descending
      sort_end: 1
    register: ami_find

  - name: create launch config
    ec2_lc:
      name: "{{cluster_name}}LC"
      image_id: "{{ami_find.results[0].ami_id}}"
      key_name: "{{keypair}}"
      security_groups: "{{instance_sg_out.group_id}}"
      instance_type: "{{instance_type}}"
      instance_profile_name: "{{cluster_name}}-instance-role"
      region: "{{region}}"
      state: "{{state}}"
      instance_monitoring: "{{instance_monitoring}}"
      user_data: |
        #!/bin/bash
        echo ECS_CLUSTER="{{cluster_name}}" > /etc/ecs/ecs.config
    register: lc_out
    tags: "{{cluster_name}}"

  - name: Create ASG
    ec2_asg:
      name: "{{cluster_name}}ASG"
      launch_config_name: "{{cluster_name}}LC"
      health_check_period: "{{health_check_period}}"
      health_check_type: "{{health_check_type}}"
      min_size: "{{min_size}}"
      max_size: "{{max_size}}"
      desired_capacity: "{{desired_capacity}}"
      region: "{{region}}"
      state: "{{state}}"
      load_balancers:
        - "{{cluster_name}}ELB"
      replace_all_instances: "{{replace_all_instances}}"
      tags:
        - Name: "{{cluster_name}} Instance"
        - Owner: "{{owner}}"
        - Role: "ECS"
      vpc_zone_identifier:
        - "{{privatea_subnet_id}}"
        - "{{privateb_subnet_id}}"
        - "{{privatec_subnet_id}}"
    register:  asg_out
    tags: "{{cluster_name}}"
